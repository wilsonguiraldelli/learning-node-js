Import e export com SUCRASE
    O node não suporta a sintax de import e export, portanto é necessária a utilização de uma ferramenta, o Sucrase
    
        yarn add sucrase -D
        
    O sucrase traduz o codigo para que ele possa ser escrito na sintax de import e export.Para tal, é necessario um arquivo de configuração .json (nodemon.json) , no qual será registrado para arquivos .js serem executados posteriormente ao arquivo sucrase/register 
    {
        "execMap": {
            "js": "node -r sucrase/register"
        }
    }
   
   - Para debugar aplicações também é necessaria uma tratativa 
        "dev:debug": 'nodemon --inspect src/server.js'
        no arquivo launch.json -> dentro de confirations -> 
         {
            "type": "node",
            "request": "attach",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "protocol": "inspector",
            "restart": true
        }
    
    ORM
        Uma forma de abstrair um banco de dados. 
        - Arquitetura MVC (Models - Views - Controllers)
        - Tabelas viram models
        
        Manipulação de Dados
        
        - Sem SQL
        - Apenas codigo js
        
        Migrations
        
        - controle de versão de base de dados
            mantem a base atualzada para todos desenvolvedores do projeto
        - cada arquivo de migração contem instruções de criação, interação ou remoção de tabelas ou colunas
        - Mantem a base atualizada para desenvolvedores e ambiente (dev e produção)
        - Cada arquivo é uma migration e sua ordenação ocorre por data 
        
        Seeds
        
        - População da base de dados para desenvolvimento
        - Popular dados de testes
        - Executavel apenas por código
        - Jamais utilizados em produção
        - Dados em produção devem ser populados pela migration
        
        Arquitetura MVC (Model - View - Controller) 
        
        Model -> A model armazena a abstração do banco, utilizado para Manipular os dados contidos nas tabelas do banco
        Controller -> ponto de entrada das requisições, uma rota está diretamente com um metodo do controller. Regras de negócio da aplicação
            podem ser em sua maior parte, incluídas nos controlers 
        Views -> é o retorno ao cliente(front-end), o json que será retornado da requisição
        
            A face de um controller
                - classes
                - sempre retorna json
                - não chama outro controller/metodo 
                - Quando criamos um novo controller? 
                    - Toda vez que possuirmos uma nova entidade na aplicações (entidade é diferente de model)
                    - nem todo controller tera uma model
                    - apenas 5 metodos 
                        index() - Listagem de usuarios
                        show() - Exibir unico usuário 
                        store() - Cadastrar usuario 
                        udpate() - Atualizar usuário
                        delete() - Remover usuário
                        
        JWT (Json Web Token)
            Metodologia de autenticação de API's rest
            
            retorna um token que possui as informações de:
            
            Header(Tipo de token, algoritimo) - Define o tipo de token gerado
            
            Payload(dados adicionais): retorno de informações do usuário
            
            Assinatura - garante que o token não foi alterado externamente. Tokens são aprova de edições
            
        
                        
