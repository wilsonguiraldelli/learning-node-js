DOCKER

Criando um container no Docker 
    
    Comando para criação de um container com uma imagem postgress pode ser encontrado na internet. No comando se define
        - nome do container
        - senha 
        
    - docker ps 
        exibe todos os container ativos e rodando
        
    - docker ps -a
        exibe todos os containers ativos e inativos 
        
    - docker stop <nome container> 
        para a execução do container
    
    - docker start <nome container>
        ativa o container
    
    - docker logs <nome container>
        retorna os logs do container 
        
ESlint

Configurando ESlint no padrão Airbnb

    - yarn eslint --init 
        inicia a configuração do eslint
        
        - to check syntax, find problems, and enforce code style
        
        - JavaScript modules (import/export)
        
        - None of these (react caso seja uma aplicação react.js ou react-native.js)
        
        - Node (barra de espaço para des-selecionar browser e selecionar node)
        
        - use popular styleguide -> Airbnb
        
        - JavaScript ou Json
        
        - Y, para instalar dependencias do Eslint
        
        - apaga arquivo package-lock.son e executa Yarn
        
    - Instalar plugin do Eslint no VScode
    
    - Configurar VScode para padronizar ao salvar
        
        - ctrl + shift + p -> settings.json
        
           // Configuração Eslint
            "editor.formatOnSave": false,
            "eslint.autoFixOnSave": true,
            "eslint.validate": [
                {
                    "language": "javascript",
                    "autoFix": true
                },
                {
                    "language": "javascriptreact",
                    "autoFix": true
                },
                {
                    "language": "typescript",
                    "autoFix": true
                },
                {
                    "language": "typescripreact",
                    "autoFix": true
                },
            ],
            
        - .eslintrc.js
        
            rules: {
                //qualquer erro do prettier será retornado como erro no eslint
               
               "prettier/prettier": "error",
               
               // reagra de define que toda classe deve contem um this
               
               "class-methods-use-this": "off",
               
               // regra que exige que nenhum parametro seja reassinado com outro valor
                
                "no-param-reassign": "off",
               
               // regra que define que todas varivel deve ser declarar em modelo camelcase
               
               "camelcase": "off",
               
               //regra de destaca variaveis não utilizadas, configurando para não destacar varivel next
               
               "no-unused-vars": ["error", { "argsIgnorePattern": "next"}]
            },
            
        - Comando eslint
        
            -  yarn eslint --fix src --ext .js
                aplica os padrões de estilo a todos os aquivos .js dentro da pasta src
        
            - 
        
        
Prettier

    yarn add prettier eslint-config-prettier eslint-plugin-prettier -D
    
    - .eslintrc.js
    
        Alterar
        extends: [
            'airbnb-base',
            'prettier'
        ],
        Criar
        plugins: ["prettier"],
        
    - criar .prettierrc na raiz
        {
            "trailingComma": "es5",
            "tabWidth": 2,
            "singleQuote": true
        }
    
EditorConfig 
    Ferramenta para padronizar configurações de editores de texto
    
    add plugin do Vscode EditorConfig
    
    - gerar arquivo .editorConfig
        com plugin instalado, clica com botão direito na raiz do projeto - gerar editorConfig
        
        root = true

        [*]
        indent_style = space
        indent_size = 2
        charset = utf-8
        trim_trailing_whitespace = true
        insert_final_newline = true
        
Sequelize
    
    - yarn add sequelize
    - yarn add sequelize-cli -D
        
    - criar arquivo .sequelizerc na raiz
    
        configurar os caminhos de acordo com a estrutura do projeto. 
        
        ex: 
        -- utilizando commonJs porque o sequelize-cli não entender a sintax import/export
        
        const {resolve} = require('path')

        module.exports = {
            config: resolve(__dirname, 'src', 'config', 'database.js'),
            'models-path': resolve(__dirname, 'src', 'app', 'models'),
            'migrations-path': resolve(__dirname, 'src', 'database', 'migrations'),
            'seeders-path': resolve(__dirname, 'src', 'database', 'seeds')
        }
    
    - Criando arquivo de conexão - config do .sequelizerc (no caso o database.js) - funcionada como o .ENV
    
        module.exports = {
            dialect: 'postgres',
            host: 'localhost',
            username: 'postgres',
            password: '123456',
            database: 'gobarber',
            define: {
                // cria coluna created_at e updated_at para todas as tabelas criadas atraves do sequelize
                timestamps: true,
                // cria o padrão de underline para separar nome de tabela ao inves de camelcase
                underscored: true,
                // aplica o padrao underscore tambem para colunas e demais elementos
                underscoredAll: true,
            },
        };

    
        - yarn add pg pg-hstore
        dependencias para bancos postgress. Para outros dialects (SGBD's) deve-se procurar as dependencias na documentação do Sequelize
        
        
    
    
        
